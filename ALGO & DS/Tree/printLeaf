// C++ program to print leaf nodes from right to left

#include <iostream>
using namespace std;

// A Binary Tree Node
struct Node {
	int data;
	struct Node *left, *right;
};

void printLeafNodesP(Node* root, Node* parent)
{
	// If node is null, return
	if (!root)
		return;

	// If node is leaf node, print its data
	if (parent && !root->left && !root->right && parent->left == root) {
		cout << root->data << " ";
		return;
	}

	// If right child exists, check for leaf
	// recursively
	if (root->right)
		printLeafNodesP(root->right, root);

	// If left child exists, check for leaf
	// recursively
	if (root->left)
		printLeafNodesP(root->left, root);
}


// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

// Function to print leaf
// nodes from right to left
void printLeafNodes(Node* root) {
	Node *parent = NULL;
  	printLeafNodesP(root, parent);
}

// Driver code
int main()
{
	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	root->right->left = newNode(6);
	root->right->right = newNode(7);
	root->left->left->left = newNode(8);
	root->right->right->left = newNode(9);
	root->left->left->left->right = newNode(10);

	printLeafNodes(root);

	return 0;
}
