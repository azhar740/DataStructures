void preorderIterative(Node *root) 
{ 
    if (root == NULL) 
        return; 
  
    stack<Node*> st; 
  
    // start from root node (set current node to root node) 
    Node* curr = root; 
  
    // run till stack is not empty or current is  
    // not NULL 
    while (!st.empty() || curr != NULL) 
    { 
        // Print left children while exist 
        // and keep pushing right into the  
        // stack. 
        while (curr != NULL) 
        { 
            cout << curr->data << " "; 
  
            if (curr->right) 
                st.push(curr->right); 
  
            curr = curr->left; 
        } 
          
        // We reach when curr is NULL, so We 
        // take out a right child from stack 
        if (st.empty() == false) 
        { 
           curr = st.top(); 
           st.pop(); 
        }    
    } 
}